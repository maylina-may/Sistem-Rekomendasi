# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Netflix Movies and TV Shows.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-bMgooNu0PmaFWIVFBL3K5WJfBkVbpMJ

# **Sistem Rekomendasi Film dan Acara TV Netflix**

## **Sumber Dataset**


https://www.kaggle.com/datasets/shivamb/netflix-shows



*   **Nama:** Maylina Nur'aini
*   **Email:** maylinanuraini@gmail.com
*   **ID Dicoding:** MC444D5X0679

# **Import Library**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from google.colab import files
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# **Data Loading**"""

# Upload fie json
from google.colab import files
files.upload()

# Setup API Key Kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset Netflix Shows dari Kaggle
!kaggle datasets download -d shivamb/netflix-shows

# Unzip file dataset
!unzip netflix-shows.zip

# Membaca file csv
df = pd.read_csv("netflix_titles.csv")

# Menampilkan 5 baris pertama
df.head()

"""Pada Data loading ini, file kaggle.json yang berisi kunci API Kaggle diunggah untuk melakukan autentikasi. Kunci ini kemudian dipindahkan ke direktori khusus agar sistem dapat mengenali dan mengizinkan akses ke Kaggle melalui API. Setelah proses autentikasi berhasil, dataset bernama Netflix Movies and TV Shows diunduh menggunakan perintah API Kaggle. File dataset yang biasanya berupa arsip ZIP kemudian diekstrak untuk mendapatkan file CSV yang berisi data. Selanjutnya, file CSV tersebut dibaca menggunakan pustaka pandas ke dalam sebuah DataFrame. Untuk mendapatkan gambaran awal mengenai isi dataset, lima baris pertama dari DataFrame tersebut ditampilkan menggunakan fungsi ```df.head()```. Langkah ini memudahkan dalam memahami struktur dan tipe data sebelum melanjutkan ke proses analisis lebih lanjut.

# **Data Understanding**
"""

# Menampilkan informasi umum dataset
df.info()

# Menampilkan statistik deskriptif kolom numerik
df.describe()

# Menampilkan jumlah baris dan kolom dalam bentuk tuple
df.shape

# Menampilkan jumlah nilai unik di setiap kolomnya
df.nunique()

# Menampilkan missing values
df.isna().sum()

# Menampilkan data duplikat
print("Jumlah duplikasi: ", df.duplicated().sum())

# Menampilkan jumlah judul, negara, dan jenis konten yang berbeda
print('Jumlah judul yang berbeda: ', len(df['title'].unique()))
print('Jumlah negara yang berbeda: ', len(df['country'].dropna().unique()))
print('Jumlah jenis konten yang berbeda: ', len(df['type'].unique()))

# Distribusi negara (country) 10 teratas
plt.figure(figsize=(12,6))
df['country'].value_counts().dropna().head(10).plot(kind='bar')
plt.title('Top 10 Negara Asal Konten Netflix')
plt.xlabel('Negara')
plt.ylabel('Jumlah Konten')
plt.xticks(rotation=45)
plt.show()

# Distribusi jenis konten (type) 10 teratas
df['type'].value_counts().plot(kind='bar', color='salmon')
plt.title('Distribusi Jenis Konten')
plt.xlabel('Tipe Konten')
plt.ylabel('Jumlah')
plt.xticks(rotation=0)
plt.show()

# Distribusi listed_in (genre) 10 teratas
plt.figure(figsize=(12,6))
df['listed_in'].value_counts().head(10).plot(kind='bar', color='teal')
plt.title('Top 10 Genre di Netflix')
plt.xlabel('Genre')
plt.ylabel('Jumlah Konten')
plt.xticks(rotation=45)
plt.show()

# Visualisasi distribusi 10 rating teratas
plt.figure(figsize=(12,6))
df['rating'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Rating Teratas')
plt.xlabel('Rating')
plt.ylabel('Jumlah Konten')
plt.xticks(rotation=45)
plt.show()

"""Pada tahap Data Understanding ini, terdiri dari 8.807 baris dan 12 kolom yang berisi informasi terkait konten yang tersedia di platform Netflix. Informasi umum yang diperoleh dari df.info() menunjukkan bahwa sebagian besar kolom berisi data bertipe objek (string), sementara release_year bertipe numerik (integer). Beberapa kolom seperti director, cast, country, date_added, dan rating memiliki nilai yang hilang (missing values), sehingga perlu diperhatikan dalam analisis lebih lanjut. Statistik deskriptif (df.describe()) mengungkapkan data numerik release_year yang mencakup rentang tahun rilis konten dari masa lalu hingga yang terbaru. Kolom kategorikal memiliki variasi yang beragam, seperti banyaknya genre, jenis konten, dan negara asal produksi. Visualisasi distribusi menunjukkan bahwa mayoritas konten berasal dari negara-negara utama seperti United States, India, dan United Kingdom. Jenis konten yang paling banyak adalah Movies, diikuti oleh TV Shows. Genre yang paling populer mencakup kategori seperti Dramas, Comedies, dan Documentaries. Sedangkan untuk rating, sebagian besar konten memiliki rating yang umum seperti TV-MA, TV-14, dan TV-PG.

# **Data Preparation**
"""

# Menghapus semua baris yang memiliki nilai NaN
df = df.dropna()

# Mengecek kembali missing value
df.isna().sum()

"""Setelah dilakukan penghapusan semua baris yang mengandung nilai kosong menggunakan df.dropna(), hasilnya menunjukkan bahwa seluruh nilai kosong telah dihilangkan, dan dataset kini hanya berisi baris dengan data lengkap.

# **TF-IDF Vectorizer**

TF-IDF Vectorizer diaplikasikan pada kolom genre (listed_in) untuk mengubah informasi kategori film menjadi bentuk numerik yang dapat diproses secara matematis. Dengan menghitung bobot kepentingan tiap kata dalam genre melalui TF-IDF, setiap film diwakili oleh sebuah vektor yang mencerminkan karakteristik genre uniknya. Vektor-vektor ini kemudian disusun dalam bentuk DataFrame dengan baris sebagai judul film dan kolom sebagai fitur genre, memudahkan perhitungan kesamaan antar film untuk keperluan rekomendasi berbasis konten.
"""

data = df
data.sample(5)

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data listed_in
tf.fit(data['listed_in'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['listed_in'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat DataFrame TF-IDF dengan:
# - baris = judul film/serial (title)
# - kolom = genre/kategori (listed_in)

df_tfidf = pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data['title']
)

# Menampilkan sampel 22 kolom dan 22 baris secara acak
df_tfidf.sample(22, axis=1).sample(22, axis=1)

"""Matriks TF-IDF berisi 8807 judul film dan 45 genre unik, dimana setiap nilai mencerminkan seberapa kuat keterkaitan sebuah film dengan genre tertentu. Representasi ini memudahkan analisis kesamaan genre antar film untuk sistem rekomendasi berbasis konten.

# **Modeling**

## **Cosine Similarity**

Cosine similarity diterapkan untuk menilai sejauh mana dua film memiliki kemiripan genre, dengan memanfaatkan representasi vektor TF-IDF dan DataFrame sebagai alat visualisasi tingkat kemiripan tersebut.
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul film
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['title'], columns=data['title'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada beberapa judul film secara acak
cosine_sim_df.sample(20, axis=1).sample(20, axis=0)

"""Hasil cosine similarity ini menunjukkan tingkat kemiripan antar judul film berdasarkan kategori atau genre yang mereka miliki. Nilai 1.0 pada diagonal menunjukkan bahwa setiap film tentu saja identik dengan dirinya sendiri. Nilai di luar diagonal menunjukkan seberapa mirip satu film dengan film lainnya â€” semakin mendekati 1, semakin tinggi kesamaan genre atau kategori di antara kedua film tersebut. Nilai yang mendekati 0 berarti film tersebut memiliki sedikit atau tidak ada kesamaan kategori. Matriks ini dapat digunakan untuk merekomendasikan film yang serupa berdasarkan konten genre.

## **Mendapatkan Rekomendasi**

Fungsi ```product_recommendations``` menghasilkan daftar produk yang paling mirip dengan produk yang dipilih, menggunakan nilai ```cosine similarity``` untuk mengurutkan rekomendasi berdasarkan tingkat kesamaan kategori. Fungsi ini juga menyajikan detail kategori agar pengguna dapat memahami alasan kemiripan tersebut.
"""

print(data.columns)

items = data[['title', 'listed_in']]

def product_recommendations(nama_show, similarity_data=cosine_sim_df, items=data[['title', 'listed_in']], k=10):
    # Cek apakah nama show ada di kolom similarity
    if nama_show not in similarity_data.columns:
        raise ValueError(f"Show '{nama_show}' tidak ditemukan di data similarity.")

    # Mengambil indeks top-k similarity tertinggi
    index = similarity_data.loc[:, nama_show].to_numpy().argpartition(-k-1)[-k-1:]

    # Urutkan berdasarkan similarity tertinggi
    sorted_index = index[similarity_data.loc[:, nama_show].to_numpy()[index].argsort()[::-1]]

    # Ambil nama-nama show terdekat
    closest = similarity_data.columns[sorted_index]

    # Hapus show yang sama dari hasil rekomendasi
    closest = closest.drop(nama_show, errors='ignore')

    # Gabungkan dengan genre
    return pd.DataFrame(closest, columns=['title']).merge(items, on='title').head(k)

# Menampilkan informasi title dengan nama 'Holiday Rush'
data[data.title.eq('Holiday Rush')]

# Mendapatkan rekomendasi title yang mirip dengan Holiday Rush
product_recommendations('Holiday Rush')

""" Telah berhasil membangun sistem rekomendasi film dan acara TV Netflix menggunakan TF-IDF untuk memproses genre, dan Cosine Similarity untuk mengukur kemiripan antar judul. Fungsi ```product_recommendations``` digunakan untuk merekomendasikan judul-judul serupa berdasarkan genre, seperti pada contoh "Holiday Rush"."""