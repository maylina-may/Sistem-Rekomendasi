# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Netflix Movies and TV Shows.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-bMgooNu0PmaFWIVFBL3K5WJfBkVbpMJ

# **Sistem Rekomendasi Film dan Acara TV Netflix**

## **Sumber Dataset**


https://www.kaggle.com/datasets/shivamb/netflix-shows



*   **Nama:** Maylina Nur'aini
*   **Email:** maylinanuraini@gmail.com
*   **ID Dicoding:** MC444D5X0679

# **Import Library**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from google.colab import files
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path
import matplotlib.pyplot as plt

"""# **Data Loading**

Pada Data loading ini, file kaggle.json yang berisi kunci API Kaggle diunggah untuk melakukan autentikasi. Kunci ini kemudian dipindahkan ke direktori khusus agar sistem dapat mengenali dan mengizinkan akses ke Kaggle melalui API. Setelah proses autentikasi berhasil, dataset bernama Netflix Movies and TV Shows diunduh menggunakan perintah API Kaggle. File dataset yang biasanya berupa arsip ZIP kemudian diekstrak untuk mendapatkan file CSV yang berisi data. Selanjutnya, file CSV tersebut dibaca menggunakan pustaka pandas ke dalam sebuah DataFrame. Untuk mendapatkan gambaran awal mengenai isi dataset, lima baris pertama dari DataFrame tersebut ditampilkan menggunakan fungsi df.head(). Langkah ini memudahkan dalam memahami struktur dan tipe data sebelum melanjutkan ke proses analisis lebih lanjut.
"""

# Upload fie json
from google.colab import files
files.upload()

# Setup API Key Kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset Netflix Shows dari Kaggle
!kaggle datasets download -d shivamb/netflix-shows

# Unzip file dataset
!unzip netflix-shows.zip

# Membaca file csv
df = pd.read_csv("netflix_titles.csv")

# Menampilkan 5 baris pertama
df.head()

"""# **Data Understanding**

Pada tahap Data Understanding ini melakukan beberapa langkah penting untuk memahami karakteristik dataset. Dimulai dengan mengecek informasi umum menggunakan `df.info()` untuk melihat tipe data dan jumlah nilai non-null pada setiap kolom. Kemudian, `df.describe()` digunakan untuk mendapatkan statistik deskriptif dari kolom numerik, memberikan gambaran tentang sebaran data seperti nilai rata-rata, standar deviasi, nilai minimum, dan maksimum.

Ukuran dataset dilihat menggunakan `df.shape`, yang menampilkan jumlah baris dan kolom. Untuk mendeteksi adanya nilai yang hilang (missing values), menggunakan `df.isna().sum()`. Selanjutnya, `df.duplicated().sum()` digunakan untuk memeriksa dan menghitung jumlah data duplikat yang ada dalam dataset.

Semua langkah ini penting untuk menilai kualitas data dan mendapatkan wawasan awal sebelum melanjutkan ke tahap analisis dan persiapan data.
"""

# Menampilkan informasi umum dataset
df.info()

"""**Insight:**
* Terdapat 11 kolom dengan tipe `object`, yaitu `show_id`, `type`, `title`, `director`, `cast`, `country`, `date_added`, `rating`, `duration`, `listed_in` dan `description`.
* Terdapat 1 kolom numerik dengan tipe int64, yaitu `release_year`.

"""

# Menampilkan statistik deskriptif kolom numerik
df.describe()

"""**Insight:**

* Statistik deskriptif `df.describe()` pada kolom numerik (`release_year`) menunjukkan sebaran tahun rilis konten, mencakup jumlah data (`count`), rata-rata (`mean`), standar deviasi (`std`), serta tahun rilis terlama (`min`) hingga terbaru (`max`) beserta kuartilnya.
"""

# Menampilkan jumlah baris dan kolom dalam bentuk tuple
df.shape

"""
**Insight:**

* Dataset ini memiliki 8807 data dan memiliki 12 kolom. Kolom Kategori 11 dan kolom numerik 1."""

# Menampilkan missing values
df.isna().sum()

"""**Insight:**

* Hasil dari `df.isna().sum()` menunjukkan jumlah nilai yang hilang (missing values) pada setiap kolom. Kolom `director`, `cast`, `country`, `date_added`, dan `rating` memiliki missing values, sementara kolom lainnya (`show_id`, `type`, `title`, `release_year`, `duration`, `listed_in`, `description`) tidak memiliki missing values. Keberadaan missing values pada kolom-kolom tersebut perlu ditangani pada tahap Data Preparation.
"""

# Menampilkan data duplikat
print("Jumlah duplikasi: ", df.duplicated().sum())

"""**Insight:**
* Tidak terdapat data duplikat dalam dataset.
"""

# Menampilkan jumlah judul, negara, dan jenis konten yang berbeda
print('Jumlah judul yang berbeda: ', len(df['title'].unique()))
print('Jumlah Negara yang berbeda: ', len(df['country'].dropna().unique()))
print('Jumlah jenis konten yang berbeda: ', len(df['type'].unique()))

"""**Insight:**

*   Terdapat sejumlah besar **judul** yang berbeda, menandakan keragaman konten film dan acara TV.
*   Ada banyak **negara** asal yang berbeda, mencerminkan jangkauan global produksi konten di Netflix.
*   Hanya ada sedikit **jenis konten** yang berbeda (seperti "Movie" dan "TV Show"), yang merupakan kategori utama konten di platform.
"""

# Distribusi negara (country) 10 teratas
plt.figure(figsize=(12,6))
df['country'].value_counts().dropna().head(10).plot(kind='bar')
plt.title('Top 10 Negara Asal Konten Netflix')
plt.xlabel('Negara')
plt.ylabel('Jumlah Konten')
plt.xticks(rotation=45)
plt.show()

"""**Insight:**

* Negara United States mendominasi jumlah konten di Netflix, menunjukkan bahwa produksi konten dari Amerika Serikat memiliki pangsa pasar yang besar di platform ini.
* India dan United Kingdom juga memiliki kontribusi konten yang signifikan, menempati posisi kedua dan ketiga, menandakan pentingnya pasar dan produksi dari negara-negara ini.
* Terdapat beragam negara lain dalam 10 besar, yang mencerminkan upaya Netflix untuk menyediakan konten dari berbagai belahan dunia dan menjangkau audiens global.
"""

# Distribusi jenis konten (type) 10 teratas
df['type'].value_counts().plot(kind='bar', color='salmon')
plt.title('Distribusi Jenis Konten')
plt.xlabel('Tipe Konten')
plt.ylabel('Jumlah')
plt.xticks(rotation=0)
plt.show()

"""**Insight:**
* Jenis konten Movies (Film) memiliki jumlah yang jauh lebih banyak dibandingkan TV Shows (Acara TV) di Netflix.

Hal ini menunjukkan bahwa mayoritas konten yang tersedia di platform Netflix adalah dalam format film.
"""

# Distribusi listed_in (genre) 10 teratas
plt.figure(figsize=(12, 8))
df['listed_in'].value_counts().head(10).plot(kind='bar', color='teal')
plt.title('Top 10 Genre di Netflix', fontsize=14)
plt.xlabel('Genre', fontsize=12)
plt.ylabel('Jumlah Konten', fontsize=12)
plt.xticks(rotation=60, ha='right', fontsize=10)
plt.tight_layout()
plt.show()

"""**Insight:**
* Grafik ini menunjukkan 10 kombinasi genre yang paling sering muncul pada konten di Netflix.
* Kombinasi genre seperti `Dramas, International Movies` dan `Documentaries` tampak sangat populer.

Ini memberikan gambaran tentang jenis-jenis konten berdasarkan kategori yang paling banyak tersedia di platform tersebut.
"""

# Visualisasi distribusi 10 rating teratas
plt.figure(figsize=(12,6))
df['rating'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Rating Teratas')
plt.xlabel('Rating')
plt.ylabel('Jumlah Konten')
plt.xticks(rotation=45)
plt.show()

"""**Insight:**
* Visualisasi ini menampilkan 10 rating yang paling sering ditemukan pada konten di Netflix. Rating seperti TV-MA, TV-14, dan TV-PG muncul sebagai rating dengan jumlah konten terbanyak.

Ini mengindikasikan bahwa sebagian besar konten di Netflix memiliki rating yang umum digunakan untuk menunjukkan kesesuaian usia penonton.

# **Data Preparation**

Pada bagian Data Preparation ini, melakukan pemberihan data dengan menghapus semua baris yang ada nilai kosong (NaN) menggunakan `df.dropna()`. Dan setelah itu dilakukan dengan pengecekan ulang meggunakan `df.isna().sum() unutk memastikan tidak ada lagi missing value nya dalam dataset.
"""

# Menghapus semua baris yang memiliki nilai NaN
df = df.dropna()
df

# Mengecek kembali missing value
df.isna().sum()

"""**Insight:**
* Hasilnya menunjukkan bahwa seluruh nilai kosong telah dihilangkan, dan dataset ini hanya berisi baris dengan data lengkap.

# **TF-IDF Vectorizer**

TF-IDF Vectorizer diaplikasikan pada kolom (genre) `listed_in` untuk mengubah informasi kategori film menjadi bentuk numerik yang dapat diproses secara matematis. Dengan menghitung bobot kepentingan tiap kata dalam genre melalui TF-IDF, setiap film diwakili oleh sebuah vektor yang mencerminkan karakteristik genre uniknya. Vektor-vektor ini kemudian disusun dalam bentuk DataFrame dengan baris sebagai judul film dan kolom sebagai fitur genre, memudahkan perhitungan kesamaan antar film untuk keperluan rekomendasi berbasis konten.
"""

data = df
data.sample(5)

"""**Insight:**
* Variabel data ini berisi DataFrame yang sudah bersih dari nilai yang hilang, siap untuk diproses lebih lanjut.
* data.sample(5) menampilkan cuplikan data yang sudah bersih.
"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data listed_in
tf.fit(data['listed_in'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""**Insight:**

* Array ini menampilkan daftar semua genre unik yang ada dalam kolom `listed_in` setelah diekstraksi oleh `TfidfVectorizer`.
* Daftar ini merepresentasikan fitur-fitur yang akan digunakan untuk membangun matriks TF-IDF, di mana setiap film akan diwakili oleh seberapa sering dan seberapa penting masing-masing genre ini muncul di dalamnya.
"""

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['listed_in'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""**Insight:**

* Matriks TF-IDF yang dihasilkan memiliki ukuran (5332, 45). Terdapat 5332 baris (sesuai dengan jumlah film dalam data setelah proses pembersihan) dan 45 kolom (sesuai dengan jumlah genre unik yang teridentifikasi).
* Setiap baris merepresentasikan sebuah film, dan setiap kolom merepresentasikan bobot TF-IDF dari sebuah genre untuk film tersebut.

Ukuran matriks ini menunjukkan bahwa proses transformasi teks genre menjadi representasi numerik berhasil dilakukan, dan matriks ini siap digunakan untuk menghitung kesamaan antar film.
"""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""**Insight:**
* Matriks numerik yang menampilkan bobot TF-IDF untuk setiap genre (kolom) untuk setiap film (baris). Matriks ini dalam format dense, artinya semua nilai, termasuk nol, akan ditampilkan.
"""

# Membuat DataFrame TF-IDF dengan dengan baris berupa nama produk dan kolom berupa jenis kategori

df_tfidf = pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data['title']
)

# Menampilkan sampel 22 kolom dan 22 baris secara acak
df_tfidf.sample(22, axis=1).sample(22, axis=1)

"""**Insight:**

* Hasil ini menunjukkan representasi numerik dari setiap judul film (baris) berdasarkan bobot TF-IDF dari berbagai genre (kolom).
* Di setiap nilai dalam tabel mencerminkan seberapa penting sebuah genre bagi film tersebut. Nilai yang lebih tinggi menunjukkan relevansi genre yang lebih besar.

# **Modeling**

## **Cosine Similarity**

Cosine similarity diterapkan untuk menilai sejauh mana dua film memiliki kemiripan genre, dengan memanfaatkan representasi vektor TF-IDF dan DataFrame sebagai alat visualisasi tingkat kemiripan tersebut.
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""* Nilai pada diagonal matriks (dari kiri atas ke kanan bawah) adalah `1.0`, menunjukkan bahwa setiap film memiliki kemiripan sempurna dengan dirinya sendiri, seperti yang diharapkan.
* Nilai di luar diagonal menunjukkan seberapa mirip satu film dengan film lainnya. Nilai yang mendekati 1 menunjukkan kemiripan genre yang tinggi, sementara nilai yang mendekati 0 menunjukkan sedikit atau tidak ada kesamaan genre.

Matriks cosine_sim ini adalah inti dari sistem rekomendasi berbasis konten, karena menyediakan ukuran kuantitatif dari kesamaan antara setiap pasang film, memungkinkan untuk mengidentifikasi film-film serupa berdasarkan genre.
"""

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul film
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['title'], columns=data['title'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada beberapa judul film secara acak
cosine_sim_df.sample(20, axis=1).sample(20, axis=0)

"""**Insight:**
* Baris dan kolom berupa judul film.
* Setiap nilai dalam sel matriks menunjukkan skor cosine similarity antara film pada baris dan film pada kolom tersebut.

## **Mendapatkan Rekomendasi**

Fungsi ```product_recommendations``` menghasilkan daftar produk yang paling mirip dengan produk yang dipilih, menggunakan nilai ```cosine similarity``` untuk mengurutkan rekomendasi berdasarkan tingkat kesamaan kategori. Fungsi ini juga menyajikan detail kategori agar pengguna dapat memahami alasan kemiripan tersebut.
"""

print(data.columns)

items = data[['title', 'listed_in']]

"""**Insight:**

* Kode `items = data[['title', 'listed_in']]` membuat DataFrame baru bernama items yang hanya berisi kolom judul (title) dan genre (listed_in) dari data yang sudah dibersihkan. Pemilihan kolom ini bertujuan untuk mempermudah akses informasi yang relevan untuk proses rekomendasi berbasis genre di langkah selanjutnya.
"""

def product_recommendations(nama_show, similarity_data=cosine_sim_df, items=data[['title', 'listed_in']], k=10):
    # Cek apakah nama show ada di kolom similarity
    if nama_show not in similarity_data.columns:
        raise ValueError(f"Show '{nama_show}' tidak ditemukan di data similarity.")

    # Mengambil indeks top-k similarity tertinggi
    index = similarity_data.loc[:, nama_show].to_numpy().argpartition(-k-1)[-k-1:]

    # Urutkan berdasarkan similarity tertinggi
    sorted_index = index[similarity_data.loc[:, nama_show].to_numpy()[index].argsort()[::-1]]

    # Ambil nama-nama show terdekat
    closest = similarity_data.columns[sorted_index]

    # Hapus show yang sama dari hasil rekomendasi
    closest = closest.drop(nama_show, errors='ignore')

    # Gabungkan dengan genre
    return pd.DataFrame(closest, columns=['title']).merge(items, on='title').head(k)

"""**Insight:**
* Fungsi `product_recommendations` mengambil nama acara/film dan menggunakan skor `cosine similarity` untuk mengembalikan daftar `k ` rekomendasi teratas berdasarkan kemiripan genre, memastikan bahwa acara/film input ada dalam data dan rekomendasi yang diberikan memiliki detail genre.
"""

# Menampilkan informasi title dengan nama 'Holiday Rush'
data[data.title.eq('Holiday Rush')]

"""**Insight:**
* Verifikasi keberadaan film `Holiday Rush` dan identifikasinya sebagai titik awal rekomendasi berdasarkan genrenya (`Children & Family Movies, Dramas`).
"""

# Mendapatkan rekomendasi title yang mirip dengan Holiday Rush
product_recommendations('Holiday Rush')

"""**Insight:**

* Sistem rekomendasi berhasil menemukan film/acara TV lain dengan genre yang serupa, yang membuktikan efektivitas model dalam merekomendasikan konten berbasis kemiripan genre. Rekomendasi ini mencakup judul-judul seperti yang ditampilkan pada hasil eksekusi fungsi product_recommendations, di mana setiap rekomendasi memiliki korelasi genre yang relevan dengan film awal ('Holiday Rush'), khususnya pada genre Children & Family Movies dan Dramas.

### **Metode evaluasi: Precision@k**

Metode evaluasi Precision@k adalah cara untuk mengukur seberapa banyak item relevan yang ada dalam k rekomendasi teratas yang diberikan oleh sistem rekomendasi. Ini membantu menilai keakuratan rekomendasi di posisi awal.
"""

# Definisikan fungsi precision_at_k
def precision_at_k(nama_show, k=10, similarity_threshold=0.5, similarity_data=cosine_sim_df):
    """
    Menghitung Precision@k untuk rekomendasi berdasarkan kemiripan kosinus.

    Args:
        nama_show (str): Nama show yang akan dievaluasi rekomendasinya.
        k (int): Jumlah rekomendasi teratas yang akan dipertimbangkan.
        similarity_threshold (float): Ambang batas kemiripan kosinus untuk dianggap relevan.
        similarity_data (pd.DataFrame): DataFrame kemiripan kosinus.

    Returns:
        float: Nilai Precision@k.
    """
    if nama_show not in similarity_data.columns:
        print(f"Show '{nama_show}' tidak ditemukan di data similarity.")
        return 0.0

    # Ambil skor kemiripan untuk show yang diberikan, urutkan menurun, dan ambil top k+1 (termasuk show itu sendiri)
    sim_scores = similarity_data.loc[:, nama_show].sort_values(ascending=False)

    # Hilangkan show itu sendiri dari skor
    sim_scores = sim_scores.drop(nama_show, errors='ignore')

    # Ambil top-k rekomendasi
    top_k_recommendations = sim_scores.head(k)

    # Hitung jumlah item relevan dalam top-k
    # Relevan jika skor kemiripan di atas threshold
    relevant_count = (top_k_recommendations > similarity_threshold).sum()

    # Hitung Precision@k
    precision = relevant_count / k if k > 0 else 0.0

    return precision

# Hitung Precision@10 untuk 'Holiday Rush' dengan threshold kemiripan 0.5
precision_10 = precision_at_k('Holiday Rush', k=10, similarity_threshold=0.5)
print(f"Precision@10 untuk 'Holiday Rush': {precision_10}")

"""**Insight:**
* Fungsi precision_at_k digunakan untuk mengevaluasi akurasi rekomendasi.
* Precision@10 sebesar 1.0 untuk `Holiday Rush` dengan threshold 0.5 menunjukkan bahwa semua 10 rekomendasi teratas sangat relevan.
"""